
=================
    Learnings
=================

    - To do a debug build of webpack (why can't you remember this?):
    
        webpack -d --watch --progress --color
    
    - When you're ready to start on the peer-to-peer connections (via WebRTC), check this out:
    
        https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API
    

================
    Database
================

Note that you have PostgreSQL 9.4.5 running via the Postgres.app (in Applications).

    - Here's the command to create the [CARKY_DB_NAME] database:
    
        createdb [CARKY_DB_NAME]
    
    - Here's how you connected to this database as a superuser via pgAdmin3:
    
        + Add a server with the following properties:
        
            Name: [any friendly name of your choosing]
            Host: localhost
            Username: [your Mac OS X username]
            Password: [your Mac OS X password]
    
    - With the connection established, here's how you can create a table:
    
        > [connection name]
        
            > [database name]
            
                > Schemas
                
                    > public
                    
                        Tables // right-click, then click 'New Table'
    
    - Once you have a table created, you can create indexes as follows:
    
        > [connection name]
                
            > [database name]
            
                > Schemas
                
                    > public
                    
                        > Tables
                        
                            > [table name]
                            
                                Indexes // right-click, then click 'New Index'
    
    - For the various commands used to create the carky.net tables, refer to pgAdmin3
    
        
    
    - Here's the command to create the [CARKY_DB_USERNAME] user:
    
        CREATE USER [CARKY_DB_USERNAME] WITH PASSWORD [CARKY_DB_PASSWORD]
    
    - To login from a command prompt:
    
        psql -d [CARKY_DB_NAME] -U [CARKY_DB_USERNAME]
    
    - TODO and WYLO .... Here's the command to grant permissions to [CARKY_DB_USERNAME] on the ? table:
    
        GRANT SELECT, INSERT, UPDATE, DELETE,  ON ? TO [CARKY_DB_USERNAME]
    
    - The 'users' table looks like this:
    
        +------+---------+------------+--------+--------+
        |  id  |  email  |  password  |  name  |  code  |
        +------+---------+------------+--------+--------+


============
    Flow
============

NOTE: In order to be a single-page app yet support "real" URLs, when any of the below URLs is requested directly, it must return the same HTML with
      the same entry-point JavaScript (carky.bundle.min.js) -- which then invokes the Backbone router to do the right thing.

    /  =>
    
        if (the user is logged in) {
            redirect to /games
        } else {
            render the beautiful sign-in/register page you created when you were going to do carky in Java/Spring
        }
    
    
    /register  =>
    
        provide a form that allows the user to register
    
    
    /forgot  =>
        
        provide a form that allows users to request a password reset email
    
    
    /reset/:email/:code  =>
    
        if (the user associated with :email has a valid :code) {
            render a form that allows for password reset
        } else {
            redirect to /
        }
    
    
    /games  =>
    
        if (the user is not logged in) {
            redirect to /
        } else {
            list the user's games in progress, and provide a 'New Game' button
        }
    
    
    /game/:id  =>
        
            if (the user is logged in) {
                if (the user is a player in game :id) {
                    render the game
                } else {
                    redirect to /games
                }
            } else {
                redirect to /
            }
    
    
    /profile  =>
    
        if (the user is not logged in) {
            redirect to /
        } else {
            show a form that allows the user to change his email, password, and name
            // TODO .... Should the site have a notion of "friends" and allow you to request friendships on this page?
            //
            //           Seems like you could enforce uniqueness on a "friends" table with help from these pages:
            //
            //               http://stackoverflow.com/questions/30036837/postgresql-enforce-unique-two-way-combination-of-columns
            //
            //               http://www.postgresql.org/docs/9.1/static/indexes-expressional.html
        }
    
    
============
    APIs
============

    /user/register  =>
    
        use the register model and db service to register a user, returning one of the following:
        
            {error: 'That email address has already been registered.'}
            {success: true}
        
    
    /user/login  =>
    
        use passport and the db service to determine whether the email and password are 



















